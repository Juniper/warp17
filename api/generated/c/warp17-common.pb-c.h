/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: warp17-common.proto */

#ifndef PROTOBUF_C_warp17_2dcommon_2eproto__INCLUDED
#define PROTOBUF_C_warp17_2dcommon_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/descriptor.pb-c.h"

typedef struct IpV6 IpV6;
typedef struct Ip Ip;
typedef struct IpRange IpRange;
typedef struct L4PortRange L4PortRange;
typedef struct Delay Delay;
typedef struct Rate Rate;


/* --- enums --- */

typedef enum _Constants {
  CONSTANTS__TPG_TEST_MAX_ENTRIES = 16,
  CONSTANTS__TPG_TEST_MAX_L3_INTF = 10,
  CONSTANTS__TPG_TS_MAX_STATE = 12,
  CONSTANTS__TPG_HTTP_MAX_OPTIONS = 32,
  CONSTANTS__TPG_TSTAMP_SAMPLES_MAX_BUFSIZE = 1000,
  CONSTANTS__TPG_IMIX_MAX_GROUPS = 16,
  CONSTANTS__TPG_IMIX_MAX_APPS = 16,
  CONSTANTS__TPG_IMIX_MAX_TOTAL_APP_WEIGHT = 100
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONSTANTS)
} Constants;
typedef enum _IpV {
  IP_V__IPV4 = 4,
  IP_V__IPV6 = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IP_V)
} IpV;
typedef enum _L4Proto {
  L4_PROTO__UDP = 0,
  L4_PROTO__TCP = 1,
  L4_PROTO__L4_PROTO_MAX = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(L4_PROTO)
} L4Proto;
typedef enum _AppProto {
  APP_PROTO__RAW_CLIENT = 0,
  APP_PROTO__RAW_SERVER = 1,
  APP_PROTO__HTTP_CLIENT = 2,
  APP_PROTO__HTTP_SERVER = 3,
  APP_PROTO__IMIX = 4,
  APP_PROTO__APP_PROTO_MAX = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(APP_PROTO)
} AppProto;

/* --- messages --- */

struct  IpV6
{
  ProtobufCMessage base;
  uint64_t ip_high;
  uint64_t ip_low;
};
#define IP_V6__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ip_v6__descriptor) \
    , 0, 0 }


struct  Ip
{
  ProtobufCMessage base;
  IpV ip_version;
  /*
   * Add v6 below as part of the union once supported. 
   */
  protobuf_c_boolean has_ip_v4;
  uint32_t ip_v4;
};
#define IP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ip__descriptor) \
    , IP_V__IPV4, 0, 0 }


struct  IpRange
{
  ProtobufCMessage base;
  Ip *ipr_start;
  Ip *ipr_end;
};
#define IP_RANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ip_range__descriptor) \
    , NULL, NULL }


struct  L4PortRange
{
  ProtobufCMessage base;
  /*
   *TODO ports should be uint16 but no such type exists. Check on the server side!!
   */
  uint32_t l4pr_start;
  uint32_t l4pr_end;
};
#define L4_PORT_RANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&l4_port_range__descriptor) \
    , 0, 0 }


struct  Delay
{
  ProtobufCMessage base;
  protobuf_c_boolean has_d_value;
  uint32_t d_value;
};
#define DELAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delay__descriptor) \
    , 0, 0 }


struct  Rate
{
  ProtobufCMessage base;
  protobuf_c_boolean has_r_value;
  uint32_t r_value;
};
#define RATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rate__descriptor) \
    , 0, 0 }


/* IpV6 methods */
void   ip_v6__init
                     (IpV6         *message);
size_t ip_v6__get_packed_size
                     (const IpV6   *message);
size_t ip_v6__pack
                     (const IpV6   *message,
                      uint8_t             *out);
size_t ip_v6__pack_to_buffer
                     (const IpV6   *message,
                      ProtobufCBuffer     *buffer);
IpV6 *
       ip_v6__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ip_v6__free_unpacked
                     (IpV6 *message,
                      ProtobufCAllocator *allocator);
/* Ip methods */
void   ip__init
                     (Ip         *message);
size_t ip__get_packed_size
                     (const Ip   *message);
size_t ip__pack
                     (const Ip   *message,
                      uint8_t             *out);
size_t ip__pack_to_buffer
                     (const Ip   *message,
                      ProtobufCBuffer     *buffer);
Ip *
       ip__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ip__free_unpacked
                     (Ip *message,
                      ProtobufCAllocator *allocator);
/* IpRange methods */
void   ip_range__init
                     (IpRange         *message);
size_t ip_range__get_packed_size
                     (const IpRange   *message);
size_t ip_range__pack
                     (const IpRange   *message,
                      uint8_t             *out);
size_t ip_range__pack_to_buffer
                     (const IpRange   *message,
                      ProtobufCBuffer     *buffer);
IpRange *
       ip_range__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ip_range__free_unpacked
                     (IpRange *message,
                      ProtobufCAllocator *allocator);
/* L4PortRange methods */
void   l4_port_range__init
                     (L4PortRange         *message);
size_t l4_port_range__get_packed_size
                     (const L4PortRange   *message);
size_t l4_port_range__pack
                     (const L4PortRange   *message,
                      uint8_t             *out);
size_t l4_port_range__pack_to_buffer
                     (const L4PortRange   *message,
                      ProtobufCBuffer     *buffer);
L4PortRange *
       l4_port_range__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   l4_port_range__free_unpacked
                     (L4PortRange *message,
                      ProtobufCAllocator *allocator);
/* Delay methods */
void   delay__init
                     (Delay         *message);
size_t delay__get_packed_size
                     (const Delay   *message);
size_t delay__pack
                     (const Delay   *message,
                      uint8_t             *out);
size_t delay__pack_to_buffer
                     (const Delay   *message,
                      ProtobufCBuffer     *buffer);
Delay *
       delay__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delay__free_unpacked
                     (Delay *message,
                      ProtobufCAllocator *allocator);
/* Rate methods */
void   rate__init
                     (Rate         *message);
size_t rate__get_packed_size
                     (const Rate   *message);
size_t rate__pack
                     (const Rate   *message,
                      uint8_t             *out);
size_t rate__pack_to_buffer
                     (const Rate   *message,
                      ProtobufCBuffer     *buffer);
Rate *
       rate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rate__free_unpacked
                     (Rate *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*IpV6_Closure)
                 (const IpV6 *message,
                  void *closure_data);
typedef void (*Ip_Closure)
                 (const Ip *message,
                  void *closure_data);
typedef void (*IpRange_Closure)
                 (const IpRange *message,
                  void *closure_data);
typedef void (*L4PortRange_Closure)
                 (const L4PortRange *message,
                  void *closure_data);
typedef void (*Delay_Closure)
                 (const Delay *message,
                  void *closure_data);
typedef void (*Rate_Closure)
                 (const Rate *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    constants__descriptor;
extern const ProtobufCEnumDescriptor    ip_v__descriptor;
extern const ProtobufCEnumDescriptor    l4_proto__descriptor;
extern const ProtobufCEnumDescriptor    app_proto__descriptor;
extern const ProtobufCMessageDescriptor ip_v6__descriptor;
extern const ProtobufCMessageDescriptor ip__descriptor;
extern const ProtobufCMessageDescriptor ip_range__descriptor;
extern const ProtobufCMessageDescriptor l4_port_range__descriptor;
extern const ProtobufCMessageDescriptor delay__descriptor;
extern const ProtobufCMessageDescriptor rate__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_warp17_2dcommon_2eproto__INCLUDED */
